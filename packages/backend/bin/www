#!/usr/bin/env node

/**
 * Module dependencies.
 */
import app from '../app.js'; // <-- Dùng import
import debugLib from 'debug'; // <-- Dùng import
import http from 'http';
import { connectDB } from '../config/database.js';
import { initModels } from '../models/initModels.js';

const debug = debugLib('backend:server');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

// await connectDB();

// server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);

(async () => {
  try {
    await connectDB();
    // Initialize model associations once DB is ready
    initModels();
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  } catch(err) {
    console.error('Failed to initialize database connection :', err);
    process.exit(1);
  }
})();



function normalizePort(val) {
    var port = parseInt(val, 10);
    if (isNaN(port)) { return val; }
    if (port >= 0) { return port; }
    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */


function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
    console.log('Backend server is running on http://localhost:' + addr.port);
}
